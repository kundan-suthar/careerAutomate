// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id   @default(uuid())
  clerkUserId   String    @unique   //clerk 
  email         String
  name          String?
  imageUrl      String?
  industry      String?     //combined industry-subIndustry (eg "tech-software-development)
  industryInsights   industryInsight? @relation(fields: [industry], references: [industry])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  //profile fields
  bio           String?
  experience    Int?
  skills        String[]

  //
  assessment    Assessment[]
  resume        Resume?
  coverLetter   CoverLetter[]

}

model Assessment{
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  quizScore Float
  question  Json[]
  category  String
  improvementTip  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}
model Resume{
  id          String      @id @default(cuid())
  userId      String      @unique   //one resume per user
  user        User      @relation(fields: [userId], references:[id])
  content     String    @db.Text //markdown content
  atsScore    Float?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
model CoverLetter{
  id    String    @id @default(cuid())
  userId String
  user    User  @relation(fields: [userId], references: [id])
  content String
  jobDescription  String?
  companyName   String
  jobTitle    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

model industryInsight{
  id    String    @id @default(cuid())
  industry String @unique   //the industry that this data belongs to
  //user  in this industry
  users   User[]
  //salary data 
  salaryRanges    Json[] //array of {role:String, min:float, max:float, median:Fload, location:String?}
  //industry trends
  growthRate Float  //industry groth rate
  demandLevel   DemandLevel  //High, medu=ium , low
  topSkills String[]    //most in demand skills

  //market Condition
  marketOutlook MarketOutlook //positive , neutral, negative
  keyTrends   String[]  //array of current industry trends

  //learning suggestions
  recommendentionSkills String[]  //skills recommended for the industry

  lastupdated   DateTime @default(now())
  nextUpdate    DateTime    //Schedule next update date
  
  @@index([industry])
}

enum DemandLevel{
  HIGH 
  MEDIUM
  LOW
}

enum MarketOutlook{
  POSITIVE
  NEUTRAL
  NEGATIVE 
}